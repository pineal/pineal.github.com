<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Structure on PINEAL.ME</title>
    <link>https://pineal.github.com/categories/data-structure/</link>
    <description>Recent content in Data Structure on PINEAL.ME</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Oct 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://pineal.github.com/categories/data-structure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Data Structures for Disjoint Sets</title>
      <link>https://pineal.github.com/posts/data_structures_for_disjoint_sets/</link>
      <pubDate>Tue, 04 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pineal.github.com/posts/data_structures_for_disjoint_sets/</guid>
      <description>Disjoint Sets 基本操作  make_set(x) 将一个vertex变成一个disjoint
 union(x, y) 将包含vertex x 的 set 和 包含vertex y 的 set 并起来
 find_set(x) 返回一个指针，指向包含这个vertex 的唯一的 set
  Basic implementation 最基本的应用是来确定一个 undirected graph 中的 connected components.
连接components:
connected_component(G) for each vertex v in G make_set(v) for each edge(u, v) e in G if (find_set(u) != find_set(v)) union(u, v) 判断两个vertices是否连接在同一component中:
same_component(u, v) if find_set(u) == find_set(v) return true else return false Example Number of Connected Components in an Undirected Graph classSolution { public: //compress the path and return the root of the union set  int find_set(vector&amp;lt;int&amp;gt; &amp;amp; allsets, int node) { if (node !</description>
    </item>
    
  </channel>
</rss>