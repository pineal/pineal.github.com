<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Structure on PINEAL.ME</title>
    <link>https://pineal.me/categories/data-structure/</link>
    <description>Recent content in Data Structure on PINEAL.ME</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Oct 2016 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://pineal.me/categories/data-structure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Data Structures for Disjoint Sets</title>
      <link>https://pineal.me/posts/data_structures_for_disjoint_sets/</link>
      <pubDate>Tue, 04 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pineal.me/posts/data_structures_for_disjoint_sets/</guid>
      <description>

&lt;h1 id=&#34;disjoint-sets&#34;&gt;Disjoint Sets&lt;/h1&gt;

&lt;h2 id=&#34;基本操作&#34;&gt;基本操作&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;make_set(x)
将一个vertex变成一个disjoint&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;union(x, y)
将包含vertex x 的 set 和 包含vertex y 的 set 并起来&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;find_set(x)
返回一个指针，指向包含这个vertex 的唯一的 set&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;简单的应用&#34;&gt;简单的应用&lt;/h2&gt;

&lt;p&gt;最基本的应用是来确定一个 undirected graph 中的 connected components.&lt;/p&gt;

&lt;p&gt;连接components:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;connected_component(G)
    for each vertex v in G
        make_set(v)
    for each edge(u, v) e in G
        if (find_set(u) != find_set(v))
            union(u, v)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;判断两个vertices是否连接在同一component中:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;same_component(u, v)
    if find_set(u) == find_set(v)
        return true
    else
        return false
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;并查集森林-disjoint-set-forest&#34;&gt;并查集森林 (Disjoint-Set Forest)&lt;/h2&gt;

&lt;p&gt;除了可以用链表来实现 disjoint-set， disjoint-set forest是一种比链表实现更快的实现。我们将sets表示为rooted trees。 每一个 node 包括一个 vertex，每一棵树代表一个set. 所有的node都指向各自的parent. 在树中那个指向自己的显然就是tree root。这种数据结构高效的原因是用了
以下两种技巧：&amp;rdquo;union by rank&amp;rdquo;, &amp;ldquo;path compression&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;union-by-rank&#34;&gt;Union By Rank&lt;/h3&gt;

&lt;p&gt;为每个node维护一个变量rank。 rank代表这这个node的高度的上限。在并集的过程中，我们依据rank的高低，把低rank的root指向高rank的root。&lt;/p&gt;

&lt;h3 id=&#34;path-compression&#34;&gt;Path compression&lt;/h3&gt;

&lt;p&gt;路径压缩并不改变任何rank，只是把tree中的所有node都指向这颗树的root。这个过程在find_set这个操作中实现。&lt;/p&gt;

&lt;h3 id=&#34;实现&#34;&gt;实现&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;make_set(x)
x.p = x
x.rank = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;union(x, y)
    link(find_set(x), find_set(y))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;link(x,y)
    if x.rank &amp;gt; y.rank
        y.p = x
    else if x.rank &amp;lt; y.rank
        x.p = y
    else
        x.p = y
        y.rank = y.rank + 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;find_set(x)
    if x != x.p
        x.p = find_set(x.p)
    return x.p
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;时间复杂度&#34;&gt;时间复杂度&lt;/h3&gt;

&lt;p&gt;时间复杂度为 O(m alpha(n))
TODO: 分析&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;h2 id=&#34;detect-cycle-in-a-undirected-graph&#34;&gt;Detect Cycle in a undirected graph&lt;/h2&gt;

&lt;p&gt;图的相关数据结构表示和函数：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;typedef struct Edge_t {
	int src;
	int dest;
} Edge;

typedef struct Graph_t {
	int V, E;
	Edge* edges;
} Graph;

Graph* build_graph(int V, int E) {
	Graph* graph = (Graph*)malloc(sizeof(Graph));
	graph-&amp;gt;V = V;
	graph-&amp;gt;E = E;
	graph-&amp;gt;edges = (Edge*)malloc(E * sizeof(Edge));
	return graph;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Disjoint-Set的相关数据结构和函数：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;typedef struct disjoint_set_t {
	int parent;
	int rank;
}Disjoint_Set;

int find_set(Disjoint_Set allsets[], int x) {
	if (allsets[x].parent != x) {
		allsets[x].parent = find_set(allsets, allsets[x].parent);
	}
	return allsets[x].parent;
}

void union_set(Disjoint_Set allsets[], int x, int y) {

	int xroot = find_set(allsets, x);
	int yroot = find_set(allsets, y);

	if (allsets[xroot].rank &amp;gt; allsets[yroot].rank) {
		allsets[yroot].parent = xroot;
	} else if (allsets[xroot].rank &amp;lt; allsets[yroot].rank) {
		allsets[xroot].parent = yroot;
	} else {
		allsets[xroot].parent = yroot;
		allsets[yroot].rank++;
	}
}

bool is_cycle(Graph* graph) {
	int V = graph-&amp;gt;V;
	int E = graph-&amp;gt;E;

	Disjoint_Set* allsets = (Disjoint_Set*)malloc(V * sizeof(Disjoint_Set));
	for (int v = 0;  v &amp;lt; V; v++) {
		allsets[v].parent = v;
		allsets[v].rank = 0;
	}

	for (int e = 0; e &amp;lt; E; e++) {
		int x = find_set(allsets, graph-&amp;gt;edges[e].src);
		int y = find_set(allsets, graph-&amp;gt;edges[e].dest);

	if(x == y) {
	return true;
	}
	union_set(allsets, x, y);
	}
	return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;main函数测试：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int main () {

	int V = 3;
	int E = 3;

	Graph* graph = build_graph(V, E);
	graph-&amp;gt;edges[0].src = 0;
	graph-&amp;gt;edges[0].dest = 1;
	graph-&amp;gt;edges[1].src = 1;
	graph-&amp;gt;edges[1].dest = 2;
	graph-&amp;gt;edges[2].src = 0;
	graph-&amp;gt;edges[2].dest = 2;
	if (is_cycle(graph)) {
		printf(&amp;quot;Cycle detected.&amp;quot;);
	} else {
		printf(&amp;quot;No cycle detected.&amp;quot;);
	}
	return 0;
}


&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;leetcode-305-number-of-islands-ii&#34;&gt;LeetCode 305 Number of Islands II&lt;/h2&gt;
</description>
    </item>
    
  </channel>
</rss>