<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Structure on PINEAL.ME</title>
    <link>https://pineal.github.com/categories/data-structure/</link>
    <description>Recent content in Data Structure on PINEAL.ME</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Oct 2016 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://pineal.github.com/categories/data-structure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Data Structures for Disjoint Sets</title>
      <link>https://pineal.github.com/posts/data_structures_for_disjoint_sets/</link>
      <pubDate>Tue, 04 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pineal.github.com/posts/data_structures_for_disjoint_sets/</guid>
      <description>

&lt;h1 id=&#34;disjoint-sets&#34;&gt;Disjoint Sets&lt;/h1&gt;

&lt;h2 id=&#34;基本操作&#34;&gt;基本操作&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;make_set(x)
将一个vertex变成一个disjoint&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;union(x, y)
将包含vertex x 的 set 和 包含vertex y 的 set 并起来&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;find_set(x)
返回一个指针，指向包含这个vertex 的唯一的 set&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;basic-implementation&#34;&gt;Basic implementation&lt;/h2&gt;

&lt;p&gt;最基本的应用是来确定一个 undirected graph 中的 connected components.&lt;/p&gt;

&lt;p&gt;连接components:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;connected_component(G)
    for each vertex v in G
        make_set(v)
    for each edge(u, v) e in G
        if (find_set(u) != find_set(v))
            union(u, v)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;判断两个vertices是否连接在同一component中:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;same_component(u, v)
    if find_set(u) == find_set(v)
        return true
    else
        return false
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;h3 id=&#34;number-of-connected-components-in-an-undirected-graph&#34;&gt;Number of Connected Components in an Undirected Graph&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution {
public:
    //compress the path and return the root of the union set
    int find_set(vector&amp;lt;int&amp;gt; &amp;amp; allsets, int node) {
        if (node != allsets[node]) {
            allsets[node] = find_set(allsets, allsets[node]);
        }
        return allsets[node];
    }
    
    void union_set(vector&amp;lt;int&amp;gt; &amp;amp; allsets, int x, int y) {
        int xroot = find_set(allsets, x);
        int yroot = find_set(allsets, y);
        allsets[yroot] = xroot;
    }
    int countComponents(int n, vector&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;&amp;amp; edges) {
        //allsets[x] : get the parent of set include x
        vector&amp;lt;int&amp;gt; allsets(n);
        int count = 0;
        for (int i = 0; i &amp;lt; n; i++) {
            allsets[i] = i;
        }
        for (auto edge : edges) {
            int x = find_set(allsets, edge.first);
            int y = find_set(allsets, edge.second);
            if (x != y) {
                union_set(allsets, edge.first, edge.second);
                count++;
            }
        }
        return n - count;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;optimization-disjoint-set-forest&#34;&gt;Optimization - Disjoint-Set Forest&lt;/h2&gt;

&lt;p&gt;除了可以用链表/数组来实现 disjoint-set， disjoint-set forest是一种比链表实现更快的实现。我们将sets表示为rooted trees。 每一个 node 包括一个 vertex，每一棵树代表一个set. 所有的node都指向各自的parent. 在树中那个指向自己的显然就是tree root。这种数据结构高效的原因是用了以下两种技巧：&amp;rdquo;union by rank&amp;rdquo; and &amp;ldquo;path compression&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;union-by-rank&#34;&gt;Union By Rank&lt;/h3&gt;

&lt;p&gt;为每个node维护一个变量rank。 rank代表这这个node的高度的上限。在并集的过程中，我们依据rank的高低，把低rank的root指向高rank的root。&lt;/p&gt;

&lt;h3 id=&#34;path-compression&#34;&gt;Path compression&lt;/h3&gt;

&lt;p&gt;路径压缩并不改变任何rank，只是把tree中的所有node都指向这颗树的root。这个过程在find_set这个操作中实现。&lt;/p&gt;

&lt;h3 id=&#34;实现&#34;&gt;实现&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;make_set(x)
x.p = x
x.rank = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;union(x, y)
    link(find_set(x), find_set(y))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;link(x,y)
    if x.rank &amp;gt; y.rank
        y.p = x
    else if x.rank &amp;lt; y.rank
        x.p = y
    else
        x.p = y
        y.rank = y.rank + 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;find_set(x)
    if x != x.p
        x.p = find_set(x.p)
    return x.p
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;时间复杂度&#34;&gt;时间复杂度&lt;/h3&gt;

&lt;p&gt;时间复杂度为 $O(m \alpha(n))$, union_set takes amortized n time complexity.&lt;/p&gt;

&lt;p&gt;空间复杂度为 O(n)&lt;/p&gt;

&lt;p&gt;TODO: 分析&lt;/p&gt;

&lt;h2 id=&#34;detect-cycle-in-a-undirected-graph&#34;&gt;Detect Cycle in a undirected graph&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Edge {
public:
    int src;
    int dest;
    Edge() {;}
    Edge(int s, int d);
};

Edge::Edge(int s, int d) {
    src = s;
    dest = d;
}

class Graph {
public:
    int V;
    int E;
    vector&amp;lt;Edge&amp;gt; edges;
    Graph(int V, int E);
    void addEdge(int start, int end);
};

Graph::Graph(int V, int E) {
    this-&amp;gt;V = V;
    this-&amp;gt;E = E;
    this-&amp;gt;edges.resize(E);
}

void Graph::addEdge(int start, int end) {
    Edge e(start, end);
    edges.emplace_back(e);
}


class DisjointSet {
public:
    int parent;
    int rank;
    DisjointSet(int parent);
};

DisjointSet::DisjointSet(int p) {
    this-&amp;gt;parent = p;
    this-&amp;gt;rank = 0;
}

//given a node, find it&#39;s parent in its disjoint_set
int find_set(vector&amp;lt;DisjointSet&amp;gt; &amp;amp; allsets, int node) {
    if (allsets[node].parent != node) {
        allsets[node].parent = find_set(allsets, allsets[node].parent);
    }
    return allsets[node].parent;
}

void union_set(vector&amp;lt;DisjointSet&amp;gt; &amp;amp; allsets, int x, int y) {
    int xp = find_set(allsets, x);
    int yp = find_set(allsets, y);
    if (allsets[xp].rank &amp;gt; allsets[yp].rank) {
        allsets[yp].parent = xp;
    }
    else if (allsets[xp].rank &amp;lt; allsets[yp].rank) {
        allsets[xp].parent = yp;
    }
    else {
        allsets[xp].parent = yp;
        allsets[yp].rank++;
    }
}

bool is_cycle(const Graph &amp;amp; graph) {
    int V = graph.V;
    int E = graph.E;
    vector&amp;lt;DisjointSet&amp;gt; allsets;
    for (int v = 0; v &amp;lt; V; v++) {
        allsets.emplace_back(v);
    }
    for (int e = 0; e &amp;lt; E; e++) {
        int x = find_set(allsets, graph.edges[e].src);
        int y = find_set(allsets, graph.edges[e].dest);
        if (x == y) {
            return true;
        }
        else {
            union_set(allsets, x, y);
        }
    }
    return false;
}

void test_is_cycle() {
    Graph graph(3, 3);
    graph.addEdge(0, 1);
    graph.addEdge(1, 2);
    graph.addEdge(0, 2);
    if (is_cycle(graph)) {
    	cout &amp;lt;&amp;lt;  &amp;quot;has a cycle&amp;quot;;
    }
    else {
        cout &amp;lt;&amp;lt; &amp;quot;does not have a cycle&amp;quot;;
    }    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;leetcode-305-number-of-islands-ii&#34;&gt;LeetCode 305 Number of Islands II&lt;/h2&gt;
</description>
    </item>
    
  </channel>
</rss>