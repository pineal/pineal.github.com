<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Backtracking on PINEAL.ME</title>
    <link>https://pineal.github.com/tags/backtracking/</link>
    <description>Recent content in Backtracking on PINEAL.ME</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://pineal.github.com/tags/backtracking/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic Backtracking Problems</title>
      <link>https://pineal.github.com/posts/backtracking/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pineal.github.com/posts/backtracking/</guid>
      <description>Introduction Backtracking 类型的题目最重要的是想清楚每一层在做什么，以及到下一层一共有几个分叉。
时间复杂度： branch factor ^ level
时间复杂度： call stack -&amp;gt; level
Subsets 这一类的题目的框架为，在递归树中的第 i 层，代表正在处理 nums 里的第 i 个元素。 从该层的父节点一定会伸展出两个分叉： 第一个分叉代表着一层会放这个元素，第二个分叉代表不放这个元素。 这样出来的递归树非常平衡。
Subsets I classSolution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; subsets(vector&amp;lt;int&amp;gt;&amp;amp; nums) { vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; rst; sort(nums.begin(), nums.end()); vector&amp;lt;int&amp;gt; cur; dfs(rst, cur, nums, 0); return rst; } void dfs(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; &amp;amp; rst, vector&amp;lt;int&amp;gt; &amp;amp; cur, const vector&amp;lt;int&amp;gt;&amp;amp; nums, int level) { if (level == nums.size()) { rst.emplace_back(cur); return; } cur.emplace_back(nums[level]); dfs(rst, cur, nums, level + 1); cur.</description>
    </item>
    
  </channel>
</rss>