<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graph on PINEAL.ME</title>
    <link>https://pineal.github.com/tags/graph/</link>
    <description>Recent content in Graph on PINEAL.ME</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Apr 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://pineal.github.com/tags/graph/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Topics on Gragh Algorithm</title>
      <link>https://pineal.github.com/posts/graph_algorithms/</link>
      <pubDate>Mon, 23 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pineal.github.com/posts/graph_algorithms/</guid>
      <description>

&lt;h1 id=&#34;graph&#34;&gt;Graph&lt;/h1&gt;

&lt;h2 id=&#34;graph-representing&#34;&gt;Graph Representing&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/graph-and-its-representations/&#34;&gt;https://www.geeksforgeeks.org/graph-and-its-representations/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs&#34;&gt;https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;adjacent-matrix&#34;&gt;Adjacent Matrix&lt;/h3&gt;

&lt;h3 id=&#34;adjacent-list&#34;&gt;Adjacent List&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/graph-implementation-using-stl-for-competitive-programming-set-1-dfs-of-unweighted-and-undirected/&#34;&gt;https://www.geeksforgeeks.org/graph-implementation-using-stl-for-competitive-programming-set-1-dfs-of-unweighted-and-undirected/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/graph-implementation-using-stl-for-competitive-programming-set-2-weighted-graph/&#34;&gt;https://www.geeksforgeeks.org/graph-implementation-using-stl-for-competitive-programming-set-2-weighted-graph/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;edges&#34;&gt;Edges&lt;/h3&gt;

&lt;h2 id=&#34;traversal&#34;&gt;Traversal&lt;/h2&gt;

&lt;h3 id=&#34;bfs&#34;&gt;BFS&lt;/h3&gt;

&lt;h3 id=&#34;dfs&#34;&gt;DFS&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Pacific Atlantic Water Flow&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;start from matrix&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;start from occean&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clone Graph
follow up: reverse if DAG&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;topological-sorting&#34;&gt;Topological Sorting&lt;/h2&gt;

&lt;h3 id=&#34;dfs-method&#34;&gt;DFS method&lt;/h3&gt;

&lt;p&gt;拓扑排序的常规方法是用DFS。DFS 有一个好处就是可以 backtracking 到所有的 solution。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/topological-sorting/&#34;&gt;https://www.geeksforgeeks.org/topological-sorting/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;bfs-1&#34;&gt;BFS&lt;/h3&gt;

&lt;p&gt;另一个方法 Kahn’s algorithm 用记录入度/出度的方式进行BFS, 相对容易记忆和实现&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/topological-sorting-indegree-based-solution/&#34;&gt;https://www.geeksforgeeks.org/topological-sorting-indegree-based-solution/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;More questions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/course-schedule&#34;&gt;Course Schedule&lt;/a&gt; | &lt;a href=&#34;https://github.com/pineal/Leetcode_OJ/blob/master/cpp/207_Course_Schedule.cpp&#34;&gt;Solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/course-schedule-ii&#34;&gt;Course Schedule II&lt;/a&gt; | &lt;a href=&#34;https://github.com/pineal/Leetcode_OJ/blob/master/cpp/210_Course_Schedule_II.cpp&#34;&gt;Solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/sequence-reconstruction&#34;&gt;Sequence Reconstruction&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-increasing-path-in-a-matrix&#34;&gt;Longest Increasing Path in a Matrix&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/alien-dictionary&#34;&gt;Alien Dictionary&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/all-topological-sorts-of-a-directed-acyclic-graph/&#34;&gt;All Topological sorts of a DAG&lt;/a&gt; | should use DFS&lt;/p&gt;

&lt;h2 id=&#34;connected-component&#34;&gt;Connected Component&lt;/h2&gt;

&lt;h3 id=&#34;connected-components-for-undirected-graph&#34;&gt;Connected components for undirected graph&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/description/&#34;&gt;Number of Connected Components&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;strongly-connected-components&#34;&gt;Strongly Connected Components&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/strongly-connected-components/&#34;&gt;https://www.geeksforgeeks.org/strongly-connected-components/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/tarjan-algorithm-find-strongly-connected-components/&#34;&gt;https://www.geeksforgeeks.org/tarjan-algorithm-find-strongly-connected-components/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/connectivity-in-a-directed-graph/&#34;&gt;https://www.geeksforgeeks.org/connectivity-in-a-directed-graph/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;shortest-path&#34;&gt;Shortest Path&lt;/h2&gt;

&lt;h3 id=&#34;shortest-distance-in-adjacent-table-bfs&#34;&gt;Shortest distance in adjacent table - BFS&lt;/h3&gt;

&lt;p&gt;Best Meeting Point&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/shortest-distance-from-all-buildings/description/&#34;&gt;Shortest Distance from All Buildings&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;dijkstra&#34;&gt;Dijkstra&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-using-set-in-stl/&#34;&gt;https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-using-set-in-stl/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/greedy-algorithms-set-6-dijkstras-shortest-path-algorithm/&#34;&gt;https://www.geeksforgeeks.org/greedy-algorithms-set-6-dijkstras-shortest-path-algorithm/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/greedy-algorithms-set-7-dijkstras-algorithm-for-adjacency-list-representation/&#34;&gt;https://www.geeksforgeeks.org/greedy-algorithms-set-7-dijkstras-algorithm-for-adjacency-list-representation/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;a-star&#34;&gt;A star&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/pineal/-O_O-/blob/master/A_Star_Search/A_Star_Search.cpp&#34;&gt;https://github.com/pineal/-O_O-/blob/master/A_Star_Search/A_Star_Search.cpp&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;iterative-deepening-search-ids-or-iterative-deepening-depth-first-search-iddfs&#34;&gt;Iterative Deepening Search(IDS) or Iterative Deepening Depth First Search(IDDFS)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/iterative-deepening-searchids-iterative-deepening-depth-first-searchiddfs/&#34;&gt;https://www.geeksforgeeks.org/iterative-deepening-searchids-iterative-deepening-depth-first-searchiddfs/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;bipartite&#34;&gt;Bipartite&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/is-graph-bipartite&#34;&gt;Is Graph Bipartite&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>