<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sorting on PINEAL.ME</title>
    <link>https://pineal.github.com/tags/sorting/</link>
    <description>Recent content in Sorting on PINEAL.ME</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Mar 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://pineal.github.com/tags/sorting/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sorting Algorithms</title>
      <link>https://pineal.github.com/posts/sorting_algorithms/</link>
      <pubDate>Mon, 14 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pineal.github.com/posts/sorting_algorithms/</guid>
      <description>假设这里的排序都是升序。
Merge Sort: 归并排序。分治法（divide and conquer）思想入门的算法。Recursively 递归入栈时将字符串分为左右两半，直到无法分割为止。出栈时再把这两半合并起来，在合并的过程中排序。最后所有的栈返回是一个排好序的数组。在用分治法的时候注意一下和纯递归求解的区别。
// merge part  vector&amp;lt;int&amp;gt; merge(vector&amp;lt;int&amp;gt; A, vector&amp;lt;int&amp;gt; B) { vector&amp;lt;int&amp;gt; rst; std::vector&amp;lt;int&amp;gt;::iterator iter1 = A.begin(), iter2 = B.begin(); while (iter1 != A.end() || iter2 != B.end()) { if (iter1 == A.end()) { rst.insert(rst.end(), iter2, B.end()); break; } if (iter2 == B.end()) { rst.insert(rst.end(), iter1, A.end()); break; } if (*iter1 &amp;lt; *iter2) { rst.emplace_back(*iter1); iter1++; } else { rst.emplace_back(*iter2); iter2++; } } return rst; } // key part of merge sort, recursive function  vector&amp;lt;int&amp;gt; MSort(vector&amp;lt;int&amp;gt; array, int left, int right) { vector&amp;lt;int&amp;gt; rst; if (left == right) { rst.</description>
    </item>
    
  </channel>
</rss>