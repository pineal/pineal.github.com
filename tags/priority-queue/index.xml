<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Priority Queue on PINEAL.ME</title>
    <link>https://pineal.github.com/tags/priority-queue/</link>
    <description>Recent content in Priority Queue on PINEAL.ME</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Oct 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://pineal.github.com/tags/priority-queue/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kth Problems</title>
      <link>https://pineal.github.com/posts/kth_problems/</link>
      <pubDate>Thu, 13 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pineal.github.com/posts/kth_problems/</guid>
      <description>Kth Problems Solution with priority queue 套路：找第K个的问题，最常用的做法就是用优先队列来实现，根据题意用最大堆或者最小堆把时间复杂度优化到 O(nlogk).
Merge k Sorted Lists //Time O(nlogk) //Space O(n) //provides greater struct Cmp { bool operator() (ListNode* n1, ListNode* n2) { return n1 -&amp;gt; val &amp;gt; n2 -&amp;gt; val; } }; classSolution { public: ListNode* mergeKLists(vector&amp;lt;ListNode*&amp;gt;&amp;amp; lists) { //min_heap needs a greater comparator  //Method 1: redefine functor  //priority_queue&amp;lt;ListNode*, vector&amp;lt;ListNode*&amp;gt;, Cmp&amp;gt; min_heap;  //Method 2: Lambda  auto cmp = [](ListNode* n1, ListNode* n2) {return n1 -&amp;gt; val &amp;gt; n2 -&amp;gt; val;}; priority_queue&amp;lt;ListNode*, vector&amp;lt;ListNode*&amp;gt;, decltype(cmp)&amp;gt; min_heap(cmp); //maintain the min_heap of size k instead of all nodes  // klogn =&amp;gt; nlogk  for (int i = 0; i &amp;lt; lists.</description>
    </item>
    
  </channel>
</rss>