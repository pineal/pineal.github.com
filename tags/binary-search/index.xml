<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Binary Search on PINEAL.ME</title>
    <link>https://pineal.github.com/tags/binary-search/</link>
    <description>Recent content in Binary Search on PINEAL.ME</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Jul 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://pineal.github.com/tags/binary-search/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Binary Search</title>
      <link>https://pineal.github.com/posts/binary_search/</link>
      <pubDate>Sat, 25 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://pineal.github.com/posts/binary_search/</guid>
      <description>经典二分搜索及其变种 二分搜索的核心思想是，在给定的搜索空间内，排除掉一定不对的那一部分。应用场景往往是有序的，或者局部有序的。这样从 $O(n)$ 可以优化到 $O(logn)$. 搜索空间的定义可以是具体的值，也可以是数组的索引，需要具体问题具体分析。
Classic binary search int classic_binary_search(vector&amp;lt;int&amp;gt; input, int target) { if (input.empty()) { return -1; } int left = 0; int right = input.size() - 1; while (left &amp;lt;= right){ int mid = left + (right - left)/2; if (input[mid] == target){ return mid; } else if (input[mid] &amp;lt; target) { left = mid + 1; } else { right = mid - 1; } } return -1; } };  find last/first index of target int find_first_index(vector&amp;lt;int&amp;gt; input, int target) { if (input.</description>
    </item>
    
  </channel>
</rss>